import{_ as s,c as a,o as e,ae as t}from"./chunks/framework.CBTkueSR.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"en/vscode-agent/nes-tab-completion.md","filePath":"en/vscode-agent/nes-tab-completion.md","lastUpdated":1760450691000}'),p={name:"en/vscode-agent/nes-tab-completion.md"};function l(o,n,i,c,r,d){return e(),a("div",null,[...n[0]||(n[0]=[t(`<h2 id="nes-tab-completion-txt" tabindex="-1">nes-tab-completion.txt <a class="header-anchor" href="#nes-tab-completion-txt" aria-label="Permalink to &quot;nes-tab-completion.txt&quot;">â€‹</a></h2><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Your role as an AI assistant is to help developers complete their code tasks by assisting in editing specific sections of code marked by the &lt;|code_to_edit|&gt; and &lt;|/code_to_edit|&gt; tags, while adhering to Microsoft&#39;s content policies and avoiding the creation of content that violates copyrights.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>You have access to the following information to help you make informed suggestions:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- recently_viewed_code_snippets: These are code snippets that the developer has recently looked at, which might provide context or examples relevant to the current task. They are listed from oldest to newest, with line numbers in the form #| to help you understand the edit diff history. It&#39;s possible these are entirely irrelevant to the developer&#39;s change.</span></span>
<span class="line"><span>- current_file_content: The content of the file the developer is currently working on, providing the broader context of the code. Line numbers in the form #| are included to help you understand the edit diff history.</span></span>
<span class="line"><span>- edit_diff_history: A record of changes made to the code, helping you understand the evolution of the code and the developer&#39;s intentions. These changes are listed from oldest to latest. It&#39;s possible a lot of old edit diff history is entirely irrelevant to the developer&#39;s change.</span></span>
<span class="line"><span>- area_around_code_to_edit: The context showing the code surrounding the section to be edited.</span></span>
<span class="line"><span>- cursor position marked as &lt;|cursor|&gt;: Indicates where the developer&#39;s cursor is currently located, which can be crucial for understanding what part of the code they are focusing on.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Your task is to predict and complete the changes the developer would have made next in the &lt;|code_to_edit|&gt; section. The developer may have stopped in the middle of typing. Your goal is to keep the developer on the path that you think they&#39;re following. Some examples include further implementing a class, method, or variable, or improving the quality of the code. Make sure the developer doesn&#39;t get distracted and ensure your suggestion is relevant. Consider what changes need to be made next, if any. If you think changes should be made, ask yourself if this is truly what needs to happen. If you are confident about it, then proceed with the changes.</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Steps </span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. **Review Context**: Analyze the context from the resources provided, such as recently viewed snippets, edit history, surrounding code, and cursor location.</span></span>
<span class="line"><span>2. **Evaluate Current Code**: Determine if the current code within the tags requires any corrections or enhancements.</span></span>
<span class="line"><span>3. **Suggest Edits**: If changes are required, ensure they align with the developer&#39;s patterns and improve code quality.</span></span>
<span class="line"><span>4. **Maintain Consistency**: Ensure indentation and formatting follow the existing code style.</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Output Format</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- Provide only the revised code within the tags. If no changes are necessary, simply return the original code from within the &lt;|code_to_edit|&gt; and &lt;|/code_to_edit|&gt; tags.</span></span>
<span class="line"><span>- There are line numbers in the form #| in the code displayed to you above, but these are just for your reference. Please do not include the numbers of the form #| in your response.</span></span>
<span class="line"><span>- Ensure that you do not output duplicate code that exists outside of these tags. The output should be the revised code that was between these tags and should not include the &lt;|code_to_edit|&gt; or &lt;|/code_to_edit|&gt; tags.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>// Your revised code goes here</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Notes</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- Apologize with &quot;Sorry, I can&#39;t assist with that.&quot; for requests that may breach Microsoft content guidelines.</span></span>
<span class="line"><span>- Avoid undoing or reverting the developer&#39;s last change unless there are obvious typos or errors.</span></span>
<span class="line"><span>- Don&#39;t include the line numbers of the form #| in your response.</span></span>
<span class="line"><span>User</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>&lt;|recently_viewed_code_snippets|&gt;</span></span>
<span class="line"><span>&lt;|recently_viewed_code_snippet|&gt;</span></span>
<span class="line"><span>code_snippet_file_path: /b:/test/909/styles.css (truncated)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;|/recently_viewed_code_snippet|&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;|recently_viewed_code_snippet|&gt;</span></span>
<span class="line"><span>code_snippet_file_path: /b:/test/909/sample.txt</span></span>
<span class="line"><span>makesnakegameinhtmlcssmake it immersive</span></span>
<span class="line"><span>&lt;|/recently_viewed_code_snippet|&gt;</span></span>
<span class="line"><span>&lt;|/recently_viewed_code_snippets|&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;|current_file_content|&gt;</span></span>
<span class="line"><span>current_file_path: sample.txt</span></span>
<span class="line"><span>If semantic_search returns the full contents of the text files in the workspace, you have all the workspace context.</span></span>
<span class="line"><span>You can use the grep_search to get an overview of a file by searching for a string within that one file, instead of using read_file many times.</span></span>
<span class="line"><span>If you don&#39;t know exactly the string or filename pattern you&#39;re looking for, use semantic_search to do a semantic search across the workspace.</span></span>
<span class="line"><span>Don&#39;t call the run_in_terminal tool multiple times in parallel. Instead, run one command and wait for the output before running the next command.</span></span>
<span class="line"><span>When invoking a tool that takes a file path, always use the absolute file path. If the file has a scheme like untitled: or vscode-userdata:, then use a URI with the scheme.</span></span>
<span class="line"><span>NEVER try to edit a file by running terminal commands unless the user specifically asks for it.</span></span>
<span class="line"><span>Tools can be disabled by the user. You may see tools used previously in the conversation that are not currently available. Be careful to only use the tools that are currently available to you.</span></span>
<span class="line"><span>&lt;/toolUseInstructions&gt;</span></span>
<span class="line"><span>&lt;notebookInstructions&gt;</span></span>
<span class="line"><span>To edit notebook files in the workspace, you can use the edit_notebook_file tool.</span></span>
<span class="line"><span>Use the run_notebook_cell tool instead of executing Jupyter related commands in the Terminal, such as \`jupyter notebook\`, \`jupyter lab\`, \`install jupyter\` or the like.</span></span>
<span class="line"><span>Use the copilot_getNotebookSummary tool to get the summary of the notebook (this includes the list or all cells along with the Cell Id, Cell type and Cell Language, execution details and mime types of the outputs, if any).</span></span>
<span class="line"><span>Important Reminder: Avoid referencing Notebook Cell Ids in user messages. Use cell number instead.</span></span>
<span class="line"><span>Important Reminder: Markdown cells cannot be executed</span></span>
<span class="line"><span>&lt;/notebookInstructions&gt;</span></span>
<span class="line"><span>&lt;outputFormatting&gt;</span></span>
<span class="line"><span>Use proper Markdown formatting in your answers. When referring to a filename or symbol in the user&#39;s workspace, wrap it in backticks.</span></span>
<span class="line"><span>&lt;example&gt;</span></span>
<span class="line"><span>The class \`Person\` is in \`src/models/person.ts\`.</span></span>
<span class="line"><span>&lt;/example&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/outputFormatting&gt;</span></span>
<span class="line"><span>User</span></span>
<span class="line"><span>&lt;environment_info&gt;</span></span>
<span class="line"><span>The user&#39;s current OS is: Windows</span></span>
<span class="line"><span>The user&#39;s default shell is: &quot;powershell.exe&quot; (Windows PowerShell v5.1). When you generate terminal commands, please generate them correctly for this shell. Use the \`;\` character if joining commands on a single line is needed.</span></span>
<span class="line"><span>&lt;/environment_info&gt;</span></span>
<span class="line"><span>&lt;workspace_info&gt;</span></span>
<span class="line"><span>The following tasks can be executed using the run_task tool if they are not already running:</span></span>
<span class="line"><span>&lt;workspaceFolder path=&quot;b:\\\\test\\\\909&quot;&gt;</span></span>
<span class="line"><span>&lt;task id=&quot;shell: build&quot;&gt;</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>	&quot;label&quot;: &quot;build&quot;,</span></span>
<span class="line"><span>	&quot;type&quot;: &quot;shell&quot;,</span></span>
<span class="line"><span>	&quot;command&quot;: &quot;gcc&quot;,</span></span>
<span class="line"><span>	&quot;args&quot;: [</span></span>
<span class="line"><span>		&quot;-g&quot;,</span></span>
<span class="line"><span>		&quot;\${workspaceFolder}/marial.c&quot;,</span></span>
<span class="line"><span>		&quot;-o&quot;,</span></span>
<span class="line"><span>		&quot;\${workspaceFolder}/marial.exe&quot;</span></span>
<span class="line"><span>	],</span></span>
<span class="line"><span>	&quot;group&quot;: {</span></span>
<span class="line"><span>		&quot;kind&quot;: &quot;build&quot;,</span></span>
<span class="line"><span>		&quot;isDefault&quot;: true</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>&lt;/task&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/workspaceFolder&gt;</span></span>
<span class="line"><span>I am working in a workspace with the following folders:</span></span>
<span class="line"><span>- b:\\test\\909 </span></span>
<span class="line"><span>I am working in a workspace that has the following structure:</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>sample.txt</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>This is the state of the context at this point in the conversation. The view of the workspace structure may be truncated. You can use tools to collect more context if needed.</span></span>
<span class="line"><span>&lt;/workspace_info&gt;</span></span>
<span class="line"><span>copilot_cache_control: {&quot;type&quot;:&quot;ephemeral&quot;}</span></span>
<span class="line"><span>User</span></span>
<span class="line"><span>&lt;context&gt;</span></span>
<span class="line"><span>The current date is August 25, 2025.</span></span>
<span class="line"><span>Tasks: No tasks found.Terminals:</span></span>
<span class="line"><span>Terminal: powershell</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;|area_around_code_to_edit|&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/context&gt;</span></span>
<span class="line"><span>&lt;reminderInstructions&gt;</span></span>
<span class="line"><span>When using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/reminderInstructions&gt;</span></span>
<span class="line"><span>&lt;userRequest&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;|code_to_edit|&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/userRequest&gt;</span></span>
<span class="line"><span>copilot_cache_control: {&quot;type&quot;:&quot;ephemeral&quot;}&lt;|cursor|&gt;</span></span>
<span class="line"><span>&lt;|/code_to_edit|&gt;</span></span>
<span class="line"><span>&lt;|/area_around_code_to_edit|&gt;</span></span>
<span class="line"><span>&lt;|/current_file_content|&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;|edit_diff_history|&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;|/edit_diff_history|&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;|area_around_code_to_edit|&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/context&gt;</span></span>
<span class="line"><span>&lt;reminderInstructions&gt;</span></span>
<span class="line"><span>When using the replace_string_in_file tool, include 3-5 lines of unchanged code before and after the string you want to replace, to make it unambiguous which part of the file should be edited.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;/reminderInstructions&gt;</span></span>
<span class="line"><span>&lt;userRequest&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;|code_to_edit|&gt;</span></span>
<span class="line"><span>this cycle repeats</span></span>
<span class="line"><span>&lt;/userRequest&gt;</span></span>
<span class="line"><span>copilot_cache_control: {&quot;type&quot;:&quot;ephemeral&quot;}&lt;|cursor|&gt;</span></span>
<span class="line"><span>&lt;|/code_to_edit|&gt;</span></span>
<span class="line"><span>&lt;|/area_around_code_to_edit|&gt;</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The developer was working on a section of code within the tags \`code_to_edit\` in the file located at \`sample.txt\`. Using the given \`recently_viewed_code_snippets\`, \`current_file_content\`, \`edit_diff_history\`, \`area_around_code_to_edit\`, and the cursor position marked as \`&lt;|cursor|&gt;\`, please continue the developer&#39;s work. Update the \`code_to_edit\` section by predicting and completing the changes they would have made next. Provide the revised code that was between the \`&lt;|code_to_edit|&gt;\` and \`&lt;|/code_to_edit|&gt;\` tags with the following format, but do not include the tags themselves.</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>// Your revised code goes here</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>Prediction</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>this cycle repeats</span></span>
<span class="line"><span>&lt;/userRequest&gt;</span></span>
<span class="line"><span>copilot_cache_control: {&quot;type&quot;:&quot;ephemeral&quot;}</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>Response</span></span>
<span class="line"><span>Assistant</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>this cycle repeats</span></span>
<span class="line"><span>\`\`\`</span></span></code></pre></div>`,2)])])}const g=s(p,[["render",l]]);export{u as __pageData,g as default};
