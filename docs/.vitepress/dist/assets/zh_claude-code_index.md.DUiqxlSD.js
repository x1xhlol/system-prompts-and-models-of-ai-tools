import{_ as o,c as d,o as c,ae as a}from"./chunks/framework.CBTkueSR.js";const h=JSON.parse('{"title":"文档目录","description":"","frontmatter":{},"headers":[],"relativePath":"zh/claude-code/index.md","filePath":"zh/claude-code/index.md"}'),t={name:"zh/claude-code/index.md"};function l(r,e,s,i,n,u){return c(),d("div",null,[...e[0]||(e[0]=[a('<h1 id="文档目录" tabindex="-1">文档目录 <a class="header-anchor" href="#文档目录" aria-label="Permalink to &quot;文档目录&quot;">​</a></h1><ul><li><a href="./claude-code-system-prompt.html">claude-code-system-prompt</a></li><li><a href="./claude-code-tools.html">claude-code-tools</a></li></ul><h2 id="产品工具文档的综述" tabindex="-1">产品工具文档的综述 <a class="header-anchor" href="#产品工具文档的综述" aria-label="Permalink to &quot;产品工具文档的综述&quot;">​</a></h2><p>此目录包含了为AI编程助手 &quot;Claude Code&quot; 设计的核心系统提示和工具集定义。Claude Code被定位为一个交互式命令行界面（CLI）工具，旨在帮助用户完成各类软件工程任务。</p><ul><li><p><strong><code>claude-code-system-prompt.md</code></strong>: 这是Claude Code的核心系统提示，定义了其身份、沟通风格（简洁、直接）和行为准则。该提示强调了在执行任务前通过搜索工具理解代码库，并使用<code>TodoWrite</code>工具进行任务规划和跟踪。它还规定了在进行代码更改后，必须运行lint和typecheck等验证步骤，以确保代码质量。</p></li><li><p><strong><code>claude-code-tools.md</code></strong>: 以JSON格式详细定义了Claude Code可用的工具集。这些工具功能全面，涵盖了从代码探索（<code>Glob</code>, <code>Grep</code>, <code>LS</code>）、文件操作（<code>Read</code>, <code>Edit</code>, <code>Write</code>）到任务执行和管理（<code>Task</code>, <code>Bash</code>, <code>TodoWrite</code>）的各个方面。特别值得注意的是<code>Task</code>工具，它可以启动一个专门的子代理来处理复杂任务，以及<code>WebFetch</code>和<code>WebSearch</code>工具，用于从网络获取信息。</p></li></ul><p>总而言之，这两个文件共同描绘了一个功能强大、工作流程严谨的CLI代码助手。它通过一套丰富的工具集和对任务规划、代码验证的强制要求，旨在系统化、高质量地完成用户的开发请求。</p>',6)])])}const m=o(t,[["render",l]]);export{h as __pageData,m as default};
