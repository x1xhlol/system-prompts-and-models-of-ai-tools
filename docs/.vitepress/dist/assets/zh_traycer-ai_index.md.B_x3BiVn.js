import{_ as o,c as a,o as t,ae as d}from"./chunks/framework.CBTkueSR.js";const h=JSON.parse('{"title":"文档目录","description":"","frontmatter":{},"headers":[],"relativePath":"zh/traycer-ai/index.md","filePath":"zh/traycer-ai/index.md"}'),r={name:"zh/traycer-ai/index.md"};function l(s,e,i,c,_,n){return t(),a("div",null,[...e[0]||(e[0]=[d('<h1 id="文档目录" tabindex="-1">文档目录 <a class="header-anchor" href="#文档目录" aria-label="Permalink to &quot;文档目录&quot;">​</a></h1><ul><li><a href="./phase_mode_prompts.html">phase_mode_prompts</a></li><li><a href="./phase_mode_tools.html">phase_mode_tools</a></li><li><a href="./plan_mode_tools.html">plan_mode_tools</a></li></ul><h2 id="产品工具文档的综述" tabindex="-1">产品工具文档的综述 <a class="header-anchor" href="#产品工具文档的综述" aria-label="Permalink to &quot;产品工具文档的综述&quot;">​</a></h2><p>此目录定义了 Traycer.AI 助手的核心操作逻辑，该助手被设计为一个在IDE中运行的技术主管，能够将复杂的编码任务分解为高层次的阶段。其功能通过两种不同的模式实现，每种模式都有其专用的系统提示和工具集。</p><ul><li><p><strong>阶段模式 (Phase Mode)</strong>:</p><ul><li><strong><code>phase_mode_prompts.md</code></strong>: 定义了AI在此模式下的角色——作为技术主管，专注于将用户查询分解为高层次阶段，并且只对代码库有只读访问权限。</li><li><strong><code>phase_mode_tools.md</code></strong>: 提供了此模式下可用的工具集，主要包括代码探索（如 <code>read_file</code>, <code>grep_search</code>）、代码导航（如 <code>find_references</code>, <code>go_to_definition</code>）以及最终用于输出阶段性计划的 <code>write_phases</code> 工具。</li></ul></li><li><p><strong>计划模式 (Plan Mode)</strong>:</p><ul><li><strong><code>plan_mode_tools.md</code></strong>: 定义了在计划模式下可用的工具。此模式下的工具集与阶段模式类似，但增加了用于复杂推理的 <code>think</code> 工具，以及用于创建和移交任务给专门代理的 <code>agent</code> 和 <code>hand_over_to_approach_agent</code> 工具，显示出此模式更侧重于详细的实施计划制定和任务分配。</li></ul></li></ul><p>总而言之，<code>traycer-ai</code> 通过这两种模式的定义，构建了一个能够从高层次任务分解到详细实施计划制定的双层AI代理系统，旨在系统化地解决复杂的软件工程任务。</p>',6)])])}const m=o(r,[["render",l]]);export{h as __pageData,m as default};
