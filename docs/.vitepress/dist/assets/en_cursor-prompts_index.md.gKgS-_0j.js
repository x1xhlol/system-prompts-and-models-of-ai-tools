import{_ as o,c as t,o as r,ae as a}from"./chunks/framework.CBTkueSR.js";const u=JSON.parse('{"title":"Cursor Prompts","description":"","frontmatter":{},"headers":[],"relativePath":"en/cursor-prompts/index.md","filePath":"en/cursor-prompts/index.md"}'),n={name:"en/cursor-prompts/index.md"};function s(i,e,m,d,l,c){return r(),t("div",null,[...e[0]||(e[0]=[a('<h1 id="cursor-prompts" tabindex="-1">Cursor Prompts <a class="header-anchor" href="#cursor-prompts" aria-label="Permalink to &quot;Cursor Prompts&quot;">​</a></h1><ul><li><a href="./Agent CLI Prompt 2025-08-07.html">Agent CLI Prompt 2025-08-07</a></li><li><a href="./Agent Prompt 2025-09-03.html">Agent Prompt 2025-09-03</a></li><li><a href="./Agent Prompt v1.0.html">Agent Prompt v1.0</a></li><li><a href="./Agent Prompt v1.2.html">Agent Prompt v1.2</a></li><li><a href="./Agent Prompt.html">Agent Prompt</a></li><li><a href="./Agent Tools v1.0.html">Agent Tools v1.0</a></li><li><a href="./Chat Prompt.html">Chat Prompt</a></li><li><a href="./Memory Prompt.html">Memory Prompt</a></li><li><a href="./Memory Rating Prompt.html">Memory Rating Prompt</a></li></ul><h2 id="summary-of-product-tool-documents" tabindex="-1">Summary of Product Tool Documents <a class="header-anchor" href="#summary-of-product-tool-documents" aria-label="Permalink to &quot;Summary of Product Tool Documents&quot;">​</a></h2><p>This directory contains a series of core system prompts and functional prompts designed for the AI programming assistant &quot;Cursor&quot;. These files collectively define the identity, behavior, tool usage, and various capabilities of the Cursor assistant as it has evolved over time.</p><ul><li><p><strong><code>Agent Prompt</code> (Multiple Versions)</strong>: There are multiple versions of the agent prompt files (e.g., <code>Agent Prompt.md</code>, <code>Agent Prompt v1.0.md</code>, <code>Agent Prompt v1.2.md</code>, <code>Agent CLI Prompt 2025-08-07.md</code>, <code>Agent Prompt 2025-09-03.md</code>), all of which position the assistant as an AI programming partner driven by advanced models (such as GPT-4.1, GPT-5, Claude Sonnet 4). These prompts detail the assistant&#39;s core workflow: understanding the codebase through tools (especially code search and file editing tools), creating a plan, executing changes, and verifying them. Different versions vary in detail, for example:</p><ul><li><strong>Early versions</strong> (<code>v1.0</code>, <code>v1.2</code>) emphasize the importance of parallel tool calls and context understanding.</li><li><strong>Newer versions</strong> (<code>2025-09-03</code>) introduce a more structured workflow, such as mandating the use of a to-do list (<code>todo_write</code>) to plan and track tasks, and imposing stricter requirements on status updates and summary formats.</li><li>The <strong>CLI version</strong> (<code>2025-08-07</code>) focuses on command-line interaction and defines in detail how to reference code and format output.</li></ul></li><li><p><strong><code>Agent Tools v1.0.md</code></strong>: Defines in detail the set of tools available to the agent in JSON format, including codebase search, file read/write, terminal command execution, Mermaid chart generation, and more.</p></li><li><p><strong><code>Chat Prompt.md</code></strong>: Defines the assistant&#39;s behavior in pure chat or Q&amp;A scenarios, where it may not perform code editing but instead provide explanations and guidance.</p></li><li><p><strong><code>Memory Prompt.md</code> and <code>Memory Rating Prompt.md</code></strong>: These two files define a &quot;memory&quot; system. <code>Memory Prompt</code> guides the AI on how to determine whether &quot;memories&quot; captured from conversations (such as user preferences, workflows) are worth remembering long-term and how to rate them. <code>Memory Rating Prompt</code> provides more detailed rating criteria and positive/negative examples, aiming to enable the AI to more accurately learn and adapt to the user&#39;s habits.</p></li></ul><p>In summary, the <code>cursor-prompts</code> directory, through a series of continuously iterating and feature-rich prompt documents, builds a highly complex, learning-capable, and rigorously workflow-oriented AI programming assistant. This assistant can not only perform specific coding tasks but also continuously optimize its collaboration with users through its memory system.</p>',6)])])}const h=o(n,[["render",s]]);export{u as __pageData,h as default};
