import{_ as o,c as t,o as r,ae as a}from"./chunks/framework.CBTkueSR.js";const h=JSON.parse('{"title":"文档目录","description":"","frontmatter":{},"headers":[],"relativePath":"zh/qoder/index.md","filePath":"zh/qoder/index.md"}'),d={name:"zh/qoder/index.md"};function i(s,e,c,l,n,p){return r(),t("div",null,[...e[0]||(e[0]=[a('<h1 id="文档目录" tabindex="-1">文档目录 <a class="header-anchor" href="#文档目录" aria-label="Permalink to &quot;文档目录&quot;">​</a></h1><ul><li><a href="./prompt.html">prompt</a></li><li><a href="./Quest Action.html">Quest Action</a></li><li><a href="./Quest Design.html">Quest Design</a></li></ul><h2 id="产品工具文档的综述" tabindex="-1">产品工具文档的综述 <a class="header-anchor" href="#产品工具文档的综述" aria-label="Permalink to &quot;产品工具文档的综述&quot;">​</a></h2><p>此目录定义了AI编程助手 &quot;Qoder&quot; 的核心规范，它被设计为在专门的代理IDE中与用户进行配对编程。Qoder的运作分为两种不同的模式，每种模式都有其独特的目的和指令集：</p><ul><li><p><strong><code>Quest Design.md</code></strong>: 此文件定义了Qoder的“设计模式”。在此模式下，Qoder扮演技术文档专家的角色，其主要任务是与用户协作，将功能想法转化为高级、抽象的设计文档。它遵循一套严格的设计流程，包括意图检测、仓库类型分析、功能设计编写和设计精炼，并使用特定的工具集（如 <code>search_codebase</code>, <code>read_file</code>, <code>search_replace</code>）来辅助设计过程。</p></li><li><p><strong><code>Quest Action.md</code></strong>: 此文件定义了Qoder的“行动模式”，这是一个在后台自主运行的代理。它的任务是根据设计文档（由设计模式生成）创建可执行的实施计划，并完成具体的编码任务。此模式下的指令集侧重于任务规划、主动执行、代码更改、测试和并行工具调用。</p></li><li><p><strong><code>prompt.md</code></strong>: 这是一个更通用的系统提示，整合并详细阐述了Qoder的身份、沟通准则、规划方法、工具使用规则（特别是并行调用和文件编辑的严格规则）、测试指南和错误处理等。它似乎是两种模式共享的基础行为准则。</p></li></ul><p>总而言之，<code>qoder</code> 目录通过设计模式（规划）和行动模式（执行）的分离，构建了一个结构化、分阶段的AI开发工作流，旨在将用户的抽象想法系统地转化为经过验证的、可执行的代码。</p>',6)])])}const u=o(d,[["render",i]]);export{h as __pageData,u as default};
