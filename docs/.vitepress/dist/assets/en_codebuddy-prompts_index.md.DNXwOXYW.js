import{_ as o,c as t,o as a,ae as s}from"./chunks/framework.CBTkueSR.js";const p=JSON.parse('{"title":"CodeBuddy Prompts","description":"","frontmatter":{},"headers":[],"relativePath":"en/codebuddy-prompts/index.md","filePath":"en/codebuddy-prompts/index.md"}'),d={name:"en/codebuddy-prompts/index.md"};function i(r,e,n,c,m,l){return a(),t("div",null,[...e[0]||(e[0]=[s('<h1 id="codebuddy-prompts" tabindex="-1">CodeBuddy Prompts <a class="header-anchor" href="#codebuddy-prompts" aria-label="Permalink to &quot;CodeBuddy Prompts&quot;">​</a></h1><ul><li><a href="./Chat Prompt.html">Chat Prompt</a></li><li><a href="./Craft Prompt.html">Craft Prompt</a></li></ul><h2 id="summary-of-product-tool-documents" tabindex="-1">Summary of Product Tool Documents <a class="header-anchor" href="#summary-of-product-tool-documents" aria-label="Permalink to &quot;Summary of Product Tool Documents&quot;">​</a></h2><p>This directory contains system prompts designed for the AI programming assistant &quot;CodeBuddy&quot; for two different operating modes. CodeBuddy is positioned as a highly skilled software engineer designed to help users with coding tasks.</p><ul><li><p><strong><code>Chat Prompt.md</code> (Chat Mode)</strong>: This prompt defines CodeBuddy&#39;s behavior in &quot;Chat Mode&quot;. In this mode, the assistant&#39;s core task is to engage in natural conversation with the user, answer questions, provide explanations, and discuss ideas. It uses the <code>chat_mode_respond</code> tool to communicate directly with the user, with a focus on information gathering and planning with the user, rather than immediate code execution.</p></li><li><p><strong><code>Craft Prompt.md</code> (Craft Mode)</strong>: This prompt defines CodeBuddy&#39;s behavior in &quot;Craft Mode&quot;. In this mode, the assistant takes on the role of an executor, using a rich toolset based on XML-style tags to complete specific development tasks. These tools include file operations (<code>read_file</code>, <code>write_to_file</code>, <code>replace_in_file</code>), command execution (<code>execute_command</code>), codebase search (<code>search_files</code>), and the ability to interact with external MCP servers. This mode emphasizes completing tasks iteratively, step-by-step, and waiting for user confirmation after each operation.</p></li></ul><p>In summary, <code>codebuddy-prompts</code>, through the switching of these two modes (manually triggered by the user), builds a complete development workflow from &quot;planning and discussion&quot; to &quot;hands-on implementation&quot;, enabling users to collaborate efficiently with the AI assistant.</p>',6)])])}const h=o(d,[["render",i]]);export{p as __pageData,h as default};
