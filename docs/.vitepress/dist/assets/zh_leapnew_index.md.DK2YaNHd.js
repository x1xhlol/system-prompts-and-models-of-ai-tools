import{_ as t,c as a,o,ae as r}from"./chunks/framework.CBTkueSR.js";const m=JSON.parse('{"title":"文档目录","description":"","frontmatter":{},"headers":[],"relativePath":"zh/leapnew/index.md","filePath":"zh/leapnew/index.md","lastUpdated":1760450691000}'),c={name:"zh/leapnew/index.md"};function i(l,e,n,d,s,p){return o(),a("div",null,[...e[0]||(e[0]=[r('<h1 id="文档目录" tabindex="-1">文档目录 <a class="header-anchor" href="#文档目录" aria-label="Permalink to &quot;文档目录&quot;">​</a></h1><ul><li><a href="./Prompts.html">Prompts</a></li><li><a href="./tools.html">tools</a></li></ul><h2 id="产品工具文档的综述" tabindex="-1">产品工具文档的综述 <a class="header-anchor" href="#产品工具文档的综述" aria-label="Permalink to &quot;产品工具文档的综述&quot;">​</a></h2><p>此目录包含了为AI助手 &quot;Leap&quot; 设计的核心系统提示和工具集。Leap被定位为一名专家级的AI助手和高级软件开发人员，精通使用TypeScript和Encore.ts进行REST API后端开发。</p><ul><li><p><strong><code>Prompts.md</code></strong>: 这是Leap的核心系统提示，定义了其身份、支持的技术栈（Encore.ts后端，React/Vite/Tailwind前端）以及行为准则。该提示的核心是工件（Artifact）的概念，Leap通过创建包含一系列文件操作（创建、修改、删除、移动）的综合性<code>&lt;leapArtifact&gt;</code>来完成用户的开发任务。它强调了在生成工件前进行整体思考，并始终提供完整、非截断的文件内容。</p></li><li><p><strong><code>tools.md</code></strong>: 以JSON格式详细定义了Leap可用的工具集。这些工具高度结构化，与工件的概念紧密相连，主要包括：</p><ul><li><strong><code>create_artifact</code></strong>: 创建包含所有项目文件更改的综合性工件。</li><li><strong><code>define_backend_service</code></strong>: 用于定义Encore.ts后端服务的结构。</li><li><strong><code>create_react_component</code></strong>: 用于创建React前端组件。</li><li>其他辅助工具，如 <code>setup_authentication</code>, <code>create_database_migration</code>, <code>setup_streaming_api</code> 等，用于配置和生成特定功能的代码。</li></ul></li></ul><p>总而言之，<code>leapnew</code>目录通过一种独特的、基于“工件”的开发模式，构建了一个高度结构化和自动化的AI开发流程。Leap助手通过生成包含所有必要文件操作的单一工件，来确保全栈应用程序开发的一致性和完整性。</p>',6)])])}const h=t(c,[["render",i]]);export{m as __pageData,h as default};
