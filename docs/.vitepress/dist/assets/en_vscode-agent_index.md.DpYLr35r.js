import{_ as t,c as o,o as i,ae as n}from"./chunks/framework.CBTkueSR.js";const p=JSON.parse('{"title":"VSCode Agent","description":"","frontmatter":{},"headers":[],"relativePath":"en/vscode-agent/index.md","filePath":"en/vscode-agent/index.md"}'),a={name:"en/vscode-agent/index.md"};function s(r,e,l,c,d,m){return i(),o("div",null,[...e[0]||(e[0]=[n('<h1 id="vscode-agent" tabindex="-1">VSCode Agent <a class="header-anchor" href="#vscode-agent" aria-label="Permalink to &quot;VSCode Agent&quot;">​</a></h1><ul><li><a href="./chat-titles.html">chat-titles</a></li><li><a href="./claude-sonnet-4.html">claude-sonnet-4</a></li><li><a href="./gemini-2.5-pro.html">gemini-2.5-pro</a></li><li><a href="./gpt-4.1.html">gpt-4.1</a></li><li><a href="./gpt-4o.html">gpt-4o</a></li><li><a href="./gpt-5-mini.html">gpt-5-mini</a></li><li><a href="./gpt-5.html">gpt-5</a></li><li><a href="./nes-tab-completion.html">nes-tab-completion</a></li><li><a href="./Prompt.html">Prompt</a></li></ul><h2 id="summary-of-product-tool-documents" tabindex="-1">Summary of Product Tool Documents <a class="header-anchor" href="#summary-of-product-tool-documents" aria-label="Permalink to &quot;Summary of Product Tool Documents&quot;">​</a></h2><p>This directory contains the core instructions and configuration files designed for the AI programming assistant &quot;GitHub Copilot&quot; integrated into VS Code. These files collectively define the multifaceted behavior of the assistant:</p><ul><li><strong><code>Prompt.md</code></strong>: This is the main system prompt, defining the assistant&#39;s identity, high-level instructions, tool usage rules (such as <code>semantic_search</code>, <code>run_in_terminal</code>, <code>insert_edit_into_file</code>, etc.), and best practices for file editing and error handling.</li><li><strong>Specific Model Prompts (e.g., <code>gpt-4o.md</code>, <code>gemini-2.5-pro.md</code>, <code>claude-sonnet-4.md</code>, etc.)</strong>: These files provide customized instruction sets for different large language models. While they share many general instructions, they also include fine-tuning for specific model tools (e.g., <code>apply_patch</code>) or behaviors to optimize their performance in the Copilot environment.</li><li><strong>Functional Prompts (e.g., <code>chat-titles.md</code>, <code>nes-tab-completion.md</code>)</strong>: These are dedicated prompts for specific functionalities. <code>chat-titles.md</code> guides the AI on how to generate concise titles for chat conversations, while <code>nes-tab-completion.md</code> (empty content) might be used to define functionalities related to Tab key code completion.</li></ul><p>In summary, this directory, through a general base prompt and multiple specialized prompts for different models and specific functionalities, constructs a complex, layered, and highly configurable AI agent system, enabling it to efficiently assist users with programming tasks in the VS Code environment.</p>',6)])])}const f=t(a,[["render",s]]);export{p as __pageData,f as default};
